{"version":3,"file":"popup.js","sources":["../src/popup/popup.ts"],"sourcesContent":["import { sendMessage, sendMessageToTab } from '../messages';\nimport { logger } from '../utils/logger';\n\ninterface PopupElements {\n  hostname: HTMLElement;\n  captureToggle: HTMLInputElement;\n  toggleStatus: HTMLElement;\n  captureNowButton: HTMLButtonElement;\n  captureNowText: HTMLElement;\n  status: HTMLElement;\n}\n\nclass PopupController {\n  private elements: PopupElements;\n  private currentHostname: string = '';\n  private currentTabId: number | undefined;\n\n  constructor() {\n    this.elements = this.getElements();\n    this.setupEventListeners();\n    this.initialize();\n    this.refreshSavedList();\n  }\n\n  private getElements(): PopupElements {\n    const get = (id: string) => document.getElementById(id)!;\n    return {\n      hostname: get('hostname'),\n      captureToggle: get('capture-toggle') as HTMLInputElement,\n      toggleStatus: get('toggle-status'),\n      captureNowButton: get('capture-now') as HTMLButtonElement,\n      captureNowText: get('capture-now-text') as HTMLElement,\n      status: get('status'),\n    };\n  }\n\n  private setupEventListeners(): void {\n    this.elements.captureToggle.addEventListener('change', () => this.handleToggleChange());\n    this.elements.captureNowButton.addEventListener('click', () => this.handleCaptureNow());\n    document.getElementById('refresh-list')!.addEventListener('click', () => this.refreshSavedList());\n  }\n\n  private async initialize(): Promise<void> {\n    try {\n      const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n      const currentTab = tabs[0];\n      if (!currentTab || !currentTab.url) return;\n      this.currentTabId = currentTab.id;\n      const url = new URL(currentTab.url);\n      this.currentHostname = url.hostname;\n      this.elements.hostname.textContent = this.currentHostname;\n      await this.updateToggleState();\n    } catch (error) {\n      logger.error('Failed to initialize popup:', error);\n    }\n  }\n\n  private async refreshSavedList(): Promise<void> {\n    try {\n      const res = await sendMessage({ type: 'LIST_CAPTURES' } as any);\n      const list: Array<{ id: string; url: string; timestamp: number; sizeBytes: number; title?: string }> = res?.items ?? [];\n      const container = document.getElementById('captures')!;\n      container.innerHTML = '';\n      list.forEach((item) => {\n        const row = document.createElement('div');\n        row.className = 'item';\n        const left = document.createElement('div');\n        left.innerHTML = `<div>${item.title || item.url}</div><div class=\"muted\">${new Date(item.timestamp).toLocaleString()} Â· ${(item.sizeBytes/1024).toFixed(1)} KB</div>`;\n        const right = document.createElement('div');\n        const openBtn = document.createElement('button');\n        openBtn.className = 'button button-link';\n        openBtn.textContent = 'Open';\n        openBtn.onclick = async () => {\n          const r = await sendMessage({ type: 'GET_CAPTURE_HTML', id: item.id } as any);\n          if (r?.ok && r.html) {\n            const blob = new Blob([r.html], { type: 'text/html' });\n            const url = URL.createObjectURL(blob);\n            chrome.tabs.create({ url });\n          }\n        };\n        const delBtn = document.createElement('button');\n        delBtn.className = 'button button-link';\n        delBtn.textContent = 'Delete';\n        delBtn.onclick = async () => {\n          await sendMessage({ type: 'DELETE_CAPTURE', id: item.id } as any);\n          this.refreshSavedList();\n        };\n        right.append(openBtn, delBtn);\n        row.append(left, right);\n        container.appendChild(row);\n      });\n    } catch (e) {\n      logger.error('Failed to list captures', e);\n    }\n  }\n\n  private async updateToggleState(): Promise<void> {\n    try {\n      const response = await sendMessage({ type: 'GET_TOGGLE', hostname: this.currentHostname } as any);\n      const enabled = response?.enabled ?? true;\n      this.elements.captureToggle.checked = enabled;\n      this.elements.toggleStatus.textContent = enabled ? 'On' : 'Off';\n    } catch {\n      this.elements.captureToggle.checked = true;\n      this.elements.toggleStatus.textContent = 'On';\n    }\n  }\n\n  private async handleToggleChange(): Promise<void> {\n    const enabled = this.elements.captureToggle.checked;\n    try {\n      await sendMessage({ type: 'TOGGLE_CAPTURE', hostname: this.currentHostname, enabled } as any);\n      this.elements.toggleStatus.textContent = enabled ? 'On' : 'Off';\n    } catch {\n      this.elements.captureToggle.checked = !enabled;\n      this.elements.toggleStatus.textContent = !enabled ? 'On' : 'Off';\n    }\n  }\n\n  private async handleCaptureNow(): Promise<void> {\n    if (!this.currentTabId) return;\n    try {\n      this.setCapturing(true);\n      let response;\n      try {\n        response = await sendMessageToTab(this.currentTabId, { type: 'CAPTURE_REQUEST', url: '' } as any);\n      } catch (err: any) {\n        const msg = String(err?.message || '');\n        if (msg.includes('Receiving end does not exist') || msg.includes('Could not establish connection')) {\n          await chrome.scripting.executeScript({ target: { tabId: this.currentTabId }, files: ['content.js'] });\n          response = await sendMessageToTab(this.currentTabId, { type: 'CAPTURE_REQUEST', url: '' } as any);\n        } else throw err;\n      }\n      if (response?.success) this.showStatus('Capture initiated successfully');\n      else this.showStatus(response?.error || 'Capture failed');\n    } catch (error) {\n      logger.error('Manual capture failed:', error);\n      this.showStatus('Failed to initiate capture');\n    } finally {\n      this.setCapturing(false);\n      this.refreshSavedList();\n    }\n  }\n\n  private setCapturing(capturing: boolean): void {\n    this.elements.captureNowButton.disabled = capturing;\n    this.elements.captureNowText.textContent = capturing ? 'Capturing' : 'Capture Now';\n  }\n\n  private showStatus(message: string): void {\n    this.elements.status.textContent = message;\n  }\n}\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => new PopupController());\n} else {\n  new PopupController();\n}"],"names":[],"mappings":"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"}