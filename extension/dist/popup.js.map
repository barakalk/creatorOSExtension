{"version":3,"file":"popup.js","sources":["../src/popup/popup.ts"],"sourcesContent":["import { sendMessage, sendMessageToTab } from '../messages';\nimport { logger } from '../utils/logger';\n\ninterface PopupElements {\n  hostname: HTMLElement;\n  captureToggle: HTMLInputElement;\n  toggleStatus: HTMLElement;\n  captureNowButton: HTMLButtonElement;\n  captureNowText: HTMLElement;\n  status: HTMLElement;\n}\n\nclass PopupController {\n  private elements: PopupElements;\n  private currentHostname: string = '';\n  private currentTabId: number | undefined;\n\n  constructor() {\n    this.elements = this.getElements();\n    this.setupEventListeners();\n    this.initialize();\n  }\n\n  private getElements(): PopupElements {\n    const get = (id: string) => document.getElementById(id);\n    \n    return {\n      hostname: get('hostname')!,\n      captureToggle: get('capture-toggle') as HTMLInputElement,\n      toggleStatus: get('toggle-status')!,\n      captureNowButton: get('capture-now') as HTMLButtonElement,\n      captureNowText: get('capture-now-text')!,\n      status: get('status')!,\n    };\n  }\n\n  private setupEventListeners(): void {\n    this.elements.captureToggle.addEventListener('change', () => {\n      this.handleToggleChange();\n    });\n\n    this.elements.captureNowButton.addEventListener('click', () => {\n      this.handleCaptureNow();\n    });\n  }\n\n  private async initialize(): Promise<void> {\n    try {\n      // Get current active tab\n      const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n      const currentTab = tabs[0];\n      \n      if (!currentTab || !currentTab.url) {\n        this.showError('No active tab found');\n        return;\n      }\n\n      this.currentTabId = currentTab.id;\n      const url = new URL(currentTab.url);\n      this.currentHostname = url.hostname;\n\n      // Update hostname display\n      this.elements.hostname.textContent = this.currentHostname;\n\n      // Get current toggle state\n      await this.updateToggleState();\n    } catch (error) {\n      logger.error('Failed to initialize popup:', error);\n      this.showError('Failed to initialize popup');\n    }\n  }\n\n  private async updateToggleState(): Promise<void> {\n    try {\n      const response = await sendMessage({\n        type: 'GET_TOGGLE',\n        hostname: this.currentHostname,\n      });\n\n      const enabled = response?.enabled ?? true;\n      this.elements.captureToggle.checked = enabled;\n      this.elements.toggleStatus.textContent = enabled ? 'On' : 'Off';\n    } catch (error) {\n      logger.error('Failed to get toggle state:', error);\n      // Default to enabled\n      this.elements.captureToggle.checked = true;\n      this.elements.toggleStatus.textContent = 'On';\n    }\n  }\n\n  private async handleToggleChange(): Promise<void> {\n    const enabled = this.elements.captureToggle.checked;\n    \n    try {\n      await sendMessage({\n        type: 'TOGGLE_CAPTURE',\n        hostname: this.currentHostname,\n        enabled,\n      });\n\n      this.elements.toggleStatus.textContent = enabled ? 'On' : 'Off';\n      \n      this.showSuccess(\n        `Capture ${enabled ? 'enabled' : 'disabled'} for ${this.currentHostname}`\n      );\n    } catch (error) {\n      logger.error('Failed to toggle capture:', error);\n      \n      // Revert toggle state\n      this.elements.captureToggle.checked = !enabled;\n      this.elements.toggleStatus.textContent = !enabled ? 'On' : 'Off';\n      \n      this.showError('Failed to update capture setting');\n    }\n  }\n\n  private async handleCaptureNow(): Promise<void> {\n    if (!this.currentTabId) {\n      this.showError('No active tab');\n      return;\n    }\n\n    try {\n      this.setCapturing(true);\n      \n      let response;\n      try {\n        response = await sendMessageToTab(this.currentTabId, {\n          type: 'CAPTURE_REQUEST',\n          url: '', // Content script will use current URL\n        });\n      } catch (err: any) {\n        const msg = String(err?.message || '');\n        if (msg.includes('Receiving end does not exist') || msg.includes('Could not establish connection')) {\n          // Inject the module content script via dynamic import and retry once\n          await chrome.scripting.executeScript({\n            target: { tabId: this.currentTabId },\n            func: (url: string) => {\n              // import() executes the module which runs the content script\n              return import(url);\n            },\n            args: [chrome.runtime.getURL('content.js')],\n            world: 'ISOLATED',\n          } as any);\n          response = await sendMessageToTab(this.currentTabId, {\n            type: 'CAPTURE_REQUEST',\n            url: '',\n          });\n        } else {\n          throw err;\n        }\n      }\n\n      if (response?.success) {\n        this.showSuccess('Capture initiated successfully');\n      } else {\n        this.showError(response?.error || 'Capture failed');\n      }\n    } catch (error) {\n      logger.error('Manual capture failed:', error);\n      this.showError('Failed to initiate capture');\n    } finally {\n      this.setCapturing(false);\n    }\n  }\n\n  private setCapturing(capturing: boolean): void {\n    this.elements.captureNowButton.disabled = capturing;\n    \n    if (capturing) {\n      this.elements.captureNowText.textContent = 'Capturing';\n      this.elements.captureNowText.classList.add('loading-dots');\n      this.showStatus('Capturing page content...', 'loading');\n    } else {\n      this.elements.captureNowText.textContent = 'Capture Now';\n      this.elements.captureNowText.classList.remove('loading-dots');\n    }\n  }\n\n  private showStatus(message: string, type: 'success' | 'error' | 'loading'): void {\n    this.elements.status.className = `status status-${type}`;\n    this.elements.status.textContent = message;\n    this.elements.status.classList.remove('hidden');\n\n    if (type !== 'loading') {\n      // Auto-hide after 3 seconds\n      setTimeout(() => {\n        this.elements.status.classList.add('hidden');\n      }, 3000);\n    }\n  }\n\n  private showSuccess(message: string): void {\n    this.showStatus(message, 'success');\n  }\n\n  private showError(message: string): void {\n    this.showStatus(message, 'error');\n  }\n}\n\n// Initialize popup when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => new PopupController());\n} else {\n  new PopupController();\n}"],"names":[],"mappings":"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"}